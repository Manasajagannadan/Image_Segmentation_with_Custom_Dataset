# -*- coding: utf-8 -*-
"""amma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ETAAGa3mkQBMcd0jZSHynlj2G8E9-LUK
"""

from google.colab import files
uploaded = files.upload()

!unzip dataset.zip

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras 
from keras.utils import Sequence
import math
import cv2
import os

train_data_dir = "dataset1/images_prepped_train"
images_prepped_train = []
IMG_SIZE = 50

images_training_data = []

def create_training_data():
    path = os.path.join(train_data_dir)
    for img in os.listdir(path): 
        img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE) 
        new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  
        images_prepped_train.append(new_array)  
        images_training_data.append([new_array])
create_training_data()
print("images_training_data = ",len(images_training_data))
print("images_prepped_train",len(images_prepped_train))

train_images = images_prepped_train
plt.figure()
plt.imshow(train_images[1])
plt.colorbar()
plt.grid(False)
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])#, cmap=plt.cm.binary)
    #plt.xlabel(class_num[train_labels[i]])
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    #plt.xlabel(class_num[train_labels[i]])
plt.show()

train_data_dir1 = "dataset1/annotations_prepped_train"
annotations_prepped_train = []
IMG_SIZE = 50

annotations_training_data = []

def create_training_data1():
    path = os.path.join(train_data_dir1)
    for img in os.listdir(path): 
        img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE) 
        new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  
        annotations_prepped_train.append(new_array)  
        annotations_training_data.append([new_array])
create_training_data1()
print("annotations_training_data = ",len(annotations_training_data))
print("annotations_prepped_train",len(annotations_prepped_train))

train_images1 = annotations_prepped_train
plt.figure()
plt.imshow(train_images1[10])
plt.colorbar()
plt.grid(False)
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images1[i])#, cmap=plt.cm.binary)
    #plt.xlabel(class_num[train_labels[i]])
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images1[i], cmap=plt.cm.binary)
    #plt.xlabel(class_num[train_labels[i]])
plt.show()

test_data_dir = "dataset1/images_prepped_test"
images_prepped_test = []
IMG_SIZE = 50

images_testing_data = []

def create_testing_data():
    path = os.path.join(test_data_dir)
    for img in os.listdir(path): 
        img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE) 
        new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  
        images_prepped_test.append(new_array)  
        images_testing_data.append([new_array])
create_testing_data()
print("images_testing_data = ",len(images_testing_data))
print("images_prepped_test",len(images_prepped_test))

test_images = images_prepped_test
plt.figure()
plt.imshow(test_images[1])
plt.colorbar()
plt.grid(False)
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(test_images[i])#, cmap=plt.cm.binary)
    #plt.xlabel(class_num[train_labels[i]])
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(test_images[i], cmap=plt.cm.binary)
    #plt.xlabel(class_num[train_labels[i]])
plt.show()

test_data_dir = "dataset1/annotations_prepped_test"
annotations_prepped_test = []
IMG_SIZE = 50

annotations_training_data = []

def create_testing_data():
    path = os.path.join(test_data_dir)
    for img in os.listdir(path): 
        img_array = cv2.imread(os.path.join(path,img) ,cv2.IMREAD_GRAYSCALE) 
        new_array = cv2.resize(img_array, (IMG_SIZE, IMG_SIZE))  
        annotations_prepped_test.append(new_array)  
        annotations_training_data.append([new_array])
create_testing_data()
print("annotations_training_data = ",len(annotations_training_data))
print("annotations_prepped_test",len(annotations_prepped_test))

test_images1 = annotations_prepped_train
plt.figure()
plt.imshow(test_images1[1])
plt.colorbar()
plt.grid(False)
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(test_images1[i])#, cmap=plt.cm.binary)
    #plt.xlabel(class_num[train_labels[i]])
plt.show()

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(test_images1[i], cmap=plt.cm.binary)
    #plt.xlabel(class_num[train_labels[i]])
plt.show()

#!pip install -q git+https://github.com/tensorflow/examples.git

!pip install git+https://github.com/qubvel/segmentation_models
#!pip install -U segmentation-models
#!pip install -U -q PyDrive
#!pip install --upgrade tensorflow
!pip install git+https://github.com/divamgupta/image-segmentation-keras
!pip install wget "https://github.com/fchollet/deep-learning-models/releases/download/v0.1/vgg16_weights_th_dim_ordering_th_kernels.h5"
!pip install git+https://github.com/divamgupta/image-segmentation-keras
!pip install git+https://github.com/divamgupta/image-segmentation-keras
#apt-get install -y libsm6 libxext6 libxrender-dev
!pip install opencv-python
#!pip install tensorflow==1.14

import tensorflow as tf
from tensorflow import keras
from keras_segmentation.models.unet import vgg_unet

model = vgg_unet(n_classes=51 ,  input_height=416, input_width=608  )

model.train(
    train_images =  "dataset1/images_prepped_train/",
    train_annotations = "dataset1/annotations_prepped_train/",
    checkpoints_path = "/tmp/vgg_unet_1" , epochs=5
)

out = model.predict_segmentation(
    inp="dataset1/images_prepped_test/0016E5_07965.png",
    out_fname="/tmp/out.png"
)

import matplotlib.pyplot as plt
plt.imshow(out)

